version: '3.9'

networks:
  default:
    external: true
    name: ${DOCKER_NETWORK}
  # local network:
  intnet:
    external: false
    name: ${INT_NETWORK}

services:

  # Alpine Linux - nginx
  webtombola:
    # depends_on:
    #  webtombola-tomcat:
    #    condition: service_healthy
    image: nginx:alpine
    # image: lhsradek/lhsdock:v3
    container_name: "${APP_ID}-nginx"
    hostname: "${APP_HOST}"
    restart: ${DOCKER_RESTART_POLICY}
    # ports:
    # - 80:80
    # - 443:443
    volumes:
      # The first mount add bash and ping to nginx:alpine - lhsradek/lhsdock this dont'n need, see:
      # https://github.com/lhsradek/platypus-lhsdock/blob/main/context/Dockerfile of lhsradek/lhsdock:v3
      - ./extras/nginx/add.sh:/docker-entrypoint.d/05-add-packages.sh
      - ./certs/${CERTNAME}.crt:/etc/ssl/private/cacert.pem:ro
      - ./certs/${CERTNAME}.key:/etc/ssl/private/cacert-key.pem:ro
      - ./application/html:/var/www/html:rw
      - ./extras/nginx/default-https.conf:/etc/nginx/conf.d/default.conf:ro
      - ./logs/tombola-nginx:/var/log/nginx:rw
      - adminer:/var/www/html/ad:rw
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.webtombola-public.rule=Host(`ad.${APP_HOST}`, `${APP_HOST}`)"
      - "traefik.http.routers.webtombola-public.entrypoints=https"
      - "traefik.http.routers.webtombola-public.tls=true"
      # for https:
      - "traefik.http.services.webtombola.loadbalancer.server.scheme=https"
      - "traefik.http.services.webtombola.loadbalancer.server.port=443"
    healthcheck:
      test: "curl -s -I http://localhost/nginx_status | grep -q 'HTTP/1.1 200 OK'"
      interval: 10s
      timeout: 10s
      retries: 200

  webtombola-tomcat:
    # Ubuntu 22.04.1 LTS
    # build:
    #   context: ./context
    #   dockerfile: Dockerfile 
    image: lhsradek/tombola:v1
    # image: tomcat:9
    container_name: "${APP_ID}-tomcat"
    hostname: "tombola.${APP_HOST}"
    restart: ${DOCKER_RESTART_POLICY}
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    environment:
      - ELASTIC_APM_ENVIRONMENT=${STAGE}
      - ELASTIC_APM_SERVER_URL=${ELASTIC_APM_SERVER_URL}
      - ELASTIC_APM_SERVICE_NAME=${APP_NICK}-tomcat
      - ELASTIC_APM_API_KEY=${ELASTIC_APM_API_KEY}
    volumes:
      - ./certs/${TOMBOLA_CERTNAME}.crt:/usr/local/tomcat/conf/localhost.pem:ro
      - ./certs/${TOMBOLA_CERTNAME}.key:/usr/local/tomcat/conf/localhost-key.pem:ro
      - ./extras/usr/local/tomcat/webapps:/usr/local/tomcat/webapps:rw
      - ./extras/usr/local/tomcat/conf/server.xml:/usr/local/tomcat/conf/server.xml:ro
      - ./extras/usr/local/tomcat/conf/tomcat-users.xml:/usr/local/tomcat/conf/tomcat-users.xml:ro
      - ./extras/usr/local/tomcat/conf/web.xml:/usr/local/tomcat/conf/web.xml:ro
      - ./extras/usr/local/tomcat/bin/catalina.sh:/usr/local/tomcat/bin/catalina.sh:ro
      - /root/platypus-lhsdock/application/html/downloads/elastic-apm-agent-1.34.1.jar:/usr/local/tomcat/lib/elastic-apm-agent-1.34.1.jar
      - ./logs/tombola-tomcat:/usr/local/tomcat/logs:rw
    # for elastic beats, see:
    # https://github.com/lhsradek/platypus-lhsdock/blob/main/extras/heartbeat/heartbeat.yml
    # https://github.com/lhsradek/platypus-lhsdock/blob/main/extras/metricbeat/modules.d/tomcat.yml
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.webtombola-tomcat-public.rule=Host(`${APP_ID}.${APP_HOST}`)"
      - "traefik.http.routers.webtombola-tomcat-public.entrypoints=https"
      - "traefik.http.routers.webtombola-tomcat-public.tls=true"
      - "traefik.http.services.webtombola-tomcat.loadbalancer.server.scheme=https"
      - "traefik.http.services.webtombola-tomcat.loadbalancer.server.port=8443"
    healthcheck:
     test: "curl -s -I http://${APP_ID}.${APP_HOST}:8080/${APP_ID}/actuator/health | grep -q 'HTTP/1.1 200'"
     interval: 10s
     timeout: 2s
     retries: 50

  webtombola-ad:
    # Alpine
    image: adminer:fastcgi
    container_name: "${APP_ID}-ad"
    hostname: "ad-php.${APP_HOST}"
    restart: ${DOCKER_RESTART_POLICY}
    networks:
      # local network:
      - intnet
    volumes:
      # - /root/bin/alpine:/root/bin/alpine:ro
      - ./logs/tombola-nginx:/var/log/nginx:rw
      - adminer:/var/www/html:rw
#
# Now is loadbalanced by service webtombola and trafik's loadbalancing is disabled
#
#    labels:
#      - "traefik.enable=true"
#      - "traefik.docker.network=${DOCKER_NETWORK}"
#      - "traefik.http.routers.webtombola-ad-public.rule=Host(`ad.${APP_HOST}`)"
#      - "traefik.http.routers.webtombola-ad-public.entrypoints=https"
#      - "traefik.http.routers.webtombola-ad-public.tls=true"

#
# === Elastic Agent as fleet server ===
#
  fleet:
    depends_on:
      webtombola:
        condition: service_healthy
    depends_on:
      webtombola-tomcat:
        condition: service_healthy
    # Ubuntu - fleet
    image: docker.elastic.co/beats/elastic-agent:${STACK_VERSION}
    # image: docker.elastic.co/beats/elastic-agent-complete:${STACK_VERSION} # ;-)
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-fleet"
    hostname: "fleet.${APP_HOST}"
    user: root # note, synthetic browser monitors require this set to `elastic-agent`
    networks:
      # default:
      #   aliases:
      #     - fleet.${APP_NICK}.${INT_NETWORK}
      # local network:
      intnet:
        aliases:
          - apm-server
    ports:
    #  - ${APM_PORT}:8200
      - ${FLEET_SERVER_PORT}:${FLEET_SERVER_PORT}
    environment:
      - APP_ID=${APP_ID}
      - APP_HOST=${HOST_NICK}
      - APP_NET=${APP_NET}
      - LOC_NET=${INT_NETWORK}
      - CLUSTER_NAME=${CLUSTER_NAME}
      - CLUSTER_UUID=${CLUSTER_UUID}
      - ELASTIC_AGENT_TAGS=${ELASTIC_AGENT_TAGS}
      - ELASTICSEARCH_HOSTS=https://es01.${HOST_NICK}.${APP_NET}:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/elastic-agent/certs/ca.crt
      - ELASTICSEARCH_CA=/usr/share/elastic-agent/certs/ca.crt
      - FLEET_ENROLL=1
      - FLEET_ENROLLMENT_TOKEN=${FLEET_ENROLLMENT_TOKEN}
      - FLEET_SERVER_ENABLE=1
      - FLEET_SERVER_ELASTICSEARCH_HOST=https://es01.${HOST_NICK}.${APP_NET}:9200
      - FLEET_SERVER_ELASTICSEARCH_USERNAME=elastic
      - FLEET_SERVER_ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - FLEET_SERVER_ELASTICSEARCH_CA=/usr/share/elastic-agent/certs/ca.crt
      - FLEET_SERVER_ELASTICSEARCH_REQUESTTIMEOUT=180000
      - FLEET_SERVER_HOST=fleet.${APP_HOST}
      - FLEET_SERVER_PORT=${FLEET_SERVER_PORT}
      - FLEET_SERVER_POLICY_ID=${FLEET_SERVER_POLICY_ID}
      - FLEET_SERVER_SERVICE_TOKEN=${FLEET_SERVER_SERVICE_TOKEN}
      - FLEET_CA=/usr/share/elastic-agent/certs/ca.crt
      - FLEET_URL=https://fleet.${APP_NICK}.${INT_NETWORK}:8223
      - FLEET_SERVER_CERT=/usr/share/elastic-agent/certs/${FLEET_CERTNAME}.crt
      - FLEET_SERVER_CERT_KEY=/usr/share/elastic-agent/certs/${FLEET_CERTNAME}.key
      - KIBANA_FLEET_USERNAME=elastic
      - KIBANA_FLEET_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_FLEET_HOST=https://kibana.${HOST_NICK}.${APP_NET}:5601
      - KIBANA_FLEET_CA=/usr/share/elastic-agent/certs/ca.crt
      - KIBANA_FLEET_SETUP=1
      - KIBANA_FLEET_REQUESTTIMEOUT=1200000
      - LOGSTASH_SERVER_CERT=/usr/share/elastic-agent/certs/${LOGSTASH_CERTNAME}.crt
      - LOGSTASH_SERVER_CERT_KEY=/usr/share/elastic-agent/certs/${LOGSTASH_CERTNAME}.key
      - STAGE=${STAGE}
      - STACK_VERSION=${STACK_VERSION}
      - STV=${STV}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
      - ./certs:/usr/share/elastic-agent/certs
      - ./extras/elastic-agent/elastic-agent.yml:/usr/share/elastic-agent/elastic-agent.yml
      - ./extras/elastic-agent/apm-server.yml:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/apm-server-${STACK_VERSION}-linux-x86_64/apm-server.yml
      - ./extras/elastic-agent/filebeat.yml:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/filebeat-${STACK_VERSION}-linux-x86_64/filebeat.yml
      - ./extras/elastic-agent/metricbeat.yml:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/metricbeat-${STACK_VERSION}-linux-x86_64/metricbeat.yml
      - ./logs/fleet/elastic-agent:/usr/share/elastic-agent/state/data/logs
      - ./logs/fleet/apm-server:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/apm-server-${STACK_VERSION}-linux-x86_64/logs
      - ./logs/fleet/filebeat:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/filebeat-${STACK_VERSION}-linux-x86_64/logs
      - ./logs/fleet/metricbeat:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/metricbeat-${STACK_VERSION}-linux-x86_64/logs
      - ./logs/tombola-nginx/:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/filebeat-${STACK_VERSION}-linux-x86_64/elogs/nginx/tombola
      - ./logs/tombola-tomcat/:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/filebeat-${STACK_VERSION}-linux-x86_64/elogs/tomcat/tombola
      - /var/log:/usr/share/filebeat/elogs/system
      - fleet:/usr/share/elastic-agent
#     labels:
#       - "traefik.enable=true"
#       - "traefik.docker.network=${DOCKER_NETWORK}"
#       - "traefik.http.routers.webtombola-apm-server-public.rule=Host(`apm-server.${APP_HOST}`)"
#       - "traefik.http.routers.webtombola-apm-server-public.entrypoints=https"
#       - "traefik.http.routers.webtombola-apm-server-public.tls=true"
#       - "traefik.http.routers.webtombola-apm-server-public.service=webtombola-apm-server"
#       - "traefik.http.services.webtombola-apm-server.loadbalancer.server.port=8200"
#       - "traefik.http.services.webtombola-apm-server.loadbalancer.server.scheme=http"
#       #
#       - "traefik.http.routers.webtombola-fleet-public.rule=Host(`fleet.${APP_HOST}`)"
#       - "traefik.http.routers.webtombola-fleet-public.entrypoints=https"
#       - "traefik.http.routers.webtombola-fleet-public.tls=true"
#       - "traefik.http.routers.webtombola-fleet-public.service=webtombola-fleet"
#       - "traefik.http.services.webtombola-fleet.loadbalancer.server.port=${FLEET_SERVER_PORT}"
#       - "traefik.http.services.webtombola-fleet.loadbalancer.server.scheme=https"
    healthcheck:
      test: ["CMD-SHELL", "elastic-agent status | grep 'Status: HEALTHY'"]
      interval: 30s
      timeout: 60s
      retries: 60

#       
#   Redis Commander - Web Console for Redis
#        
#   webtombola-rc:
#     image: rediscommander/redis-commander:latest
#     container_name: "${APP_ID}-webrc"
#     hostname: "webrc.${INT_NETWORK}"
#     # build: .
#     restart: ${DOCKER_RESTART_POLICY}
#     networks:
#       # for traefik:
#       - default
#       # local network:
#       - intnet
#     environment:
#       - REDIS_HOSTS=redis
#     #ports:
#     # - "8081:8081"
#     labels:
#       - "traefik.enable=true"
#       - "traefik.docker.network=${DOCKER_NETWORK}"
#       - "traefik.http.routers.webtombola-rc-public.rule=Host(`rc.${APP_HOST}`)"
#       - "traefik.http.routers.webtombola-rc-public.entrypoints=https"
#       - "traefik.http.routers.webtombola-rc-public.tls=true"
#       - "traefik.http.services.webtombola-rc-platypus-${APP_ID}.loadbalancer.server.port=8081"
#       - "traefik.http.services.webtombola-rc-platypus-${APP_ID}.loadbalancer.server.scheme=http"

  postgres:
    image: postgres:13-alpine
    container_name: "${APP_ID}-db"
    hostname: "db.${APP_HOST}"
    # hostname: "db.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - 5432:5432
    networks:
      # local network:
      - intnet
    volumes:
      - postgres:/var/lib/postgresql/data:rw
      - ./extras/docker-entrypoint-initdb.d/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh:ro
      # after init db
      # - ./logs/tombola-postgres:/var/lib/postgresql/data/log:rw
      # only copy file after init db is better
      # - ./extras/var/lib/postgresql/data/postgresql.conf:/var/lib/postgresql/data/postgresql.conf:ro
      ## - ./extras/var/lib/postgresql/data/pg_hba.conf:/var/lib/postgresql/data/pg_hba.new.conf:ro

  redis:
    image: redis:7-alpine
    # Alpine Linux
    container_name: "${APP_ID}-redis"
    hostname: "redis"
    # hostname: "redis.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    networks:
      # local network:
      - intnet
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    # ports:
    #  - 6379:6379
    volumes:
      - redis:/data:rw

volumes:
  postgres:
    external: false
    name: "${APP_ID}-db"
  adminer:
    external: false
    name: "${APP_ID}-adminer"
  redis:
    external: false
    name: "${APP_ID}-redis"
  fleet:
    external: false
    name: "${APP_ID}-fleet"
